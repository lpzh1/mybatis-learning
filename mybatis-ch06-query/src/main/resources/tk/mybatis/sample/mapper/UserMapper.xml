<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tk.mybatis.sample.mapper.UserMapper">
    <sql id="sysUserRow">

    </sql>
    <select id="findUserById" resultType="sysUser">
        select *
        from sys_user
        where id = #{id}
    </select>

    <select id="findAll" resultType="sysUser">
        select id,
               user_name     userName,
               user_password userPassword,
               user_email    userEmail,
               user_info     userInfo,
               head_img      headImg,
               create_time   createTime
        from sys_user
    </select>


    <insert id="saveUser">
        insert into sys_user(user_name, user_password, user_email, user_info, head_img, create_time)
        values (#{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg}, , #{createTime})
    </insert>


    <!-- 一对一 : 嵌套结果映射-->
    <select id="selectUserAndRoleById" resultType="sysUser">
        select u.id,
               u.user_name     userName,
               u.user_password userPassword,
               u.user_email    userEmail,
               u.user_info     userInfo,
               u.head_img      headImg,
               u.create_time   createTime,
               r.id            "role.id",
               r.role_name     "role.roleName",
               r.enabled       "role.enabled",
               r.create_by     "role.createBy",
               r.create_time   "role.createTime"
        from sys_user u
                 inner join sys_user_role ur on u.id = ur.user_id
                 inner join sys_role r on ur.role_id = r.id
        where u.id = #{id} limit 1
    </select>

    <!-- 一对一：resultMap  -->
    <select id="selectUserAndRoleById2" resultMap="userRoleMap3">
        select u.id,
               u.user_name     ,
               u.user_password ,
               u.user_email    ,
               u.user_info     ,
               u.head_img      ,
               u.create_time   ,
               r.id            role_id,
               r.role_name     role_role_name,
               r.enabled       role_enabled,
               r.create_by     role_create_by,
               r.create_time   role_create_time
        from sys_user u
                 inner join sys_user_role ur on u.id = ur.user_id
                 inner join sys_role r on ur.role_id = r.id
        where u.id = #{id} limit 1
    </select>


    <resultMap id="userRoleMap3" type="sysUser" extends="userMap">
        <!-- role 相关属性-->
        <association property="role" columnPrefix="role_" resultMap="tk.mybatis.sample.mapper.RoleMapper.roleMap"/>
    </resultMap>

    <!--
     TODO 注意: 这里为了方便复习，保留了 userRoleMap1、userRoleMap2，其实是不需要他们了。
        保留它们，只是为了展示代码如何一步一步简化的过程。
     -->

    <resultMap id="userRoleMap2" type="sysUser" extends="userMap">
        <!-- role 相关属性-->
        <association property="role" columnPrefix="role_" javaType="sysRole">
            <result property="id" column="id"/>
            <result property="roleName" column="role_name"/>
            <result property="enabled" column="enabled"/>
            <result property="createBy" column="create_by"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        </association>
    </resultMap>

    <resultMap id="userRoleMap1" type="sysUser" extends="userMap">
        <!-- role 相关属性 -->
        <result property="role.id" column="role_id"/>
        <result property="role.roleName" column="role_name"/>
        <result property="role.enabled" column="enabled"/>
        <result property="role.createBy" column="create_by"/>
        <result property="role.createTime" column="role_create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="userMap" type="sysUser">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        <id column="user_password" property="userPassword"/>
        -->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="user_password" jdbcType="VARCHAR" property="userPassword"/>
        <result column="user_email" jdbcType="VARCHAR" property="userEmail"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="user_info" jdbcType="LONGVARCHAR" property="userInfo"/>
        <result column="head_img" jdbcType="LONGVARBINARY" property="headImg"/>
    </resultMap>

    <!-- 一对一：嵌套查询（即多次查询） -->
    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
        select u.id,
               u.user_name     ,
               u.user_password ,
               u.user_email    ,
               u.user_info     ,
               u.head_img      ,
               u.create_time   ,
               ur.role_id
        from sys_user u
                 inner join sys_user_role ur on u.id = ur.user_id
        where u.id = #{id}
        limit 1
    </select>

    <resultMap id="userRoleMapSelect" type="sysUser" extends="userMap">
        <!-- FIXME 注意：这里调用 selectRoleById 方法时，不需要RoleMapper接口中有方法声明，只要RoleMapper.xml中有配置查询SQL语句即可-->
        <association fetchType="lazy" property="role" column="{id=role_id}" select="tk.mybatis.sample.mapper.RoleMapper.selectRoleById"/>
    </resultMap>


    <!-- 一对多 -->
    <!-- 两层嵌套的一对多：
        用户==》角色  一对多
        角色==》权限  一对多
     -->
    <!-- 查询所有用户及其对应的角色 -->
    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
        select u.id            ,
               u.user_name     ,
               u.user_password ,
               u.user_email    ,
               u.user_info     ,
               u.head_img      ,
               u.create_time   ,
               r.id            role_id,
               r.role_name     role_role_name,
               r.enabled       role_enabled,
               r.create_by     role_create_by,
               r.create_time   role_create_time,
               p.id             role_privilege_id,
               p.privilege_name role_privilege_privilege_name,
               p.privilege_url  role_privilege_privilege_url
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        inner join sys_role_privilege rp on rp.role_id = r.id
        inner join sys_privilege p on p.id = rp.privilege_id
    </select>
    <resultMap id="userRoleListMap" type="sysUser" extends="userMap">
        <!-- role 相关属性-->
        <!-- FIXME 注意：collection元素不要加 javaType="sysRole"  -->
        <collection property="roleList" columnPrefix="role_"  resultMap="tk.mybatis.sample.mapper.RoleMapper.rolePrivilegeListMap"/>
    </resultMap>


    <!-- collection集合的嵌套查询（多次查询、支持懒加载） -->
    <!-- 仍然是以上面的 一对多 为例 -->
    <!-- 根据id 查询用户，及其对应的角色信息 -->
    <resultMap id="userRoleListMapSelected" type="sysUser" extends="userMap">
        <collection property="roleList" fetchType="lazy" column="{userId=id}"
                    select="tk.mybatis.sample.mapper.RoleMapper.selectRoleByUserId"/>
    </resultMap>

    <!-- 查询所有用户及其角色 -->
    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelected">
        select u.id,
               u.user_name,
               u.user_password,
               u.user_email,
               u.user_info,
               u.head_img,
               u.create_time
        from sys_user u
    </select>

    <!-- 根据id查询一个用户及其角色 -->
    <select id="selectUserById" resultMap="userRoleListMapSelected">
        select * from sys_user where id = #{userId}
    </select>


</mapper>